多线程:一条线程，处理任务很有限，效率低，为了提高效率，多加一条线程来处理任务，可以减少阻塞

普通方法调用:主线程调用方法，线程折出去执行完方法后返回来继续执行主线程，只有主线程一条执行路径
多线程调用:主线程调用方法，方法作为子线程，和主线程并行交替执行(一个人干多个任务)

一个进程(Process)可以有多个线程(Thread)，比如看视频为一个进程，包含了声音，画面，弹幕等线程

程序是指令和数据的有效集合，本身没有任何运行的含义，是一个静态的概念
进程则是程序的一次执行过程，是一个动态的概念，是系统资源分配的单位
一个进程中通常包含了多个线程，一个进程最少含有一个线程(main主线程)
线程是CPU调度和执行的单位。

很多多线程只是模拟出来的，真正的多线程含有多个的CPU，例如服务器(多核)
如果是模拟出来的多线程(一个CPU)，在同一个时间点，CPU执行一个代码，但因为切换执行的代码，切换的很快，所以有同时执行的错觉

线程就是独立的执行路径。
程序运行时，即使没有自己创建线程，后台也会有多个线程(例如main主线程，gc垃圾清理线程)
main()称之为主线程，为系统的入口，用于执行整个程序
在一个进程中如果开辟了多个线程，线程的运行由调度器安排调度，调度器与操作系统紧密相关，先后顺序是不能人为干预的。
对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制。
线程会带来额外的开销，例如CPU调度时间，并发控制开销。
每个线程在自己的工作内存交互，内存控制不当会造成数据不一致
