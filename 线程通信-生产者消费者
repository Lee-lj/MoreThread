线程通信，指两个线程之间相互能够传递信息

例如生产者消费者，生产者消费者共享一个资源，并且生产者消费者之间相互依赖，互为条件
假设仓库中只能存放一个资源，生产者生产资源，添加到仓库中。消费者从仓库中取走资源
仓库中没有产品的话，通知消费者等待，生产者将产品放入仓库后，通知消费者来消费，有的话就停止生产，等待仓库中的产品被消费者取走
仓库中有资源，消费者就取走资源，通知生产者生产新的资源，否则消费者停止消费，等待加入新的资源，然后消费

生产者消费者之间只使用synchronized不够，synchronized只能实现多线程对一个资源的共享，实现线程同步，不能实现不同线程之间的线程通信

Java提供的解决线程通信的方法:
1.wait() 表示线程一直等待，直到其他线程通知，与sleep不同，sleep不会释放锁，而wait会释放锁
2.wait(long timeout) 指定等待多少毫秒
3.notify() 唤醒一个处于等待状态的进程
4.notifyAll()  唤醒同一个对象上所有调用wait()方法的线程，优先级高的线程优先调度
这些均为Object类的方法(因为锁为object类)，都只能在同步方法或同步代码块中使用，否则会抛出异常IIIegalMonitorStateException

解决方式1:
生产者:负责生产数据的模块(可能是方法，对象，进程，线程)
消费者:负责处理数据的模块(可能是方法，对象，进程，线程)
缓冲区:相当于仓库，生产者生产的数据放到这里，消费者从这里取数据

解决方式2:
并发协作模型"生产者/消费者模式"-》信号灯法
设置一个标志位，true/false控制多线程的执行