多个线程各自占有一些共享资源，并且互相等待其他线程释放占有的资源才能运行，而两个或多个线程都在等待对方释放资源，都停止执行的情况就是死锁

同时拥有两个以上对象的锁时，可能会发生"死锁"的问题

            synchronized(mirror) {//获得口红的锁
				System.out.println(this.name+"获得镜子");
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				synchronized(lip) {//一秒钟后拿镜子
					System.out.println(this.name+"获得口红");
				}
			}获得一个锁，然后获得另一个锁占有的资源，就会产生死锁
			
			synchronized(mirror) {//获得口红的锁
				System.out.println(this.name+"获得镜子");
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			synchronized(lip) {//一秒钟后拿镜子
				System.out.println(this.name+"获得口红");
			}获得之后释放，再获取另一个锁就不会产生死锁
			
产生死锁的条件:
1.互斥条件:一个资源每次只能被一个资源使用
2.请求与保持条件:一个进程因请求资源而阻塞时对已获得的资源不释放
3.不剥夺条件:进程已经获得的资源，在没有使用完时，不能强行剥夺
4.循环等待条件:若干个进程形成一条头尾循环的资源等待关系
只要破坏这一个或多个条件，就可以避免死锁的发生			
